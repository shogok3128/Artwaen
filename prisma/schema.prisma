// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ユーザーモデル
model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  password       String?
  image          String?
  emailVerified  DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
  sessions       Session[]
  
  // プロフィール種類（個人/チーム/コレクティブ）
  profileType    String    @default("個人")
  
  // ユーザープロフィール
  bio            String?   @db.Text
  location       String?
  genre          String[]
  
  // リレーション
  events         Event[]   @relation("EventCreator")
  participations Participation[]
  projects       Project[]
  teams          TeamMember[]
}

// イベントモデル
model Event {
  id           String    @id @default(cuid())
  title        String
  description  String    @db.Text
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  startDate    DateTime
  endDate      DateTime
  location     String?
  isOnline     Boolean   @default(false)
  onlineLink   String?
  genres       String[]
  
  // 募集タイプ
  needsPerformers Boolean  @default(false)
  needsExhibitors Boolean  @default(false)
  needsAttendees  Boolean  @default(false)
  
  // 主催者
  creatorId    String
  creator      User      @relation("EventCreator", fields: [creatorId], references: [id])
  
  // 参加者
  participants Participation[]
}

// 参加モデル（イベント参加）
model Participation {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // 参加タイプ (出演者/出展者/来場者)
  type         String
  status       String    @default("pending") // pending, approved, rejected
  
  // リレーション
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  
  eventId      String
  event        Event     @relation(fields: [eventId], references: [id])
  
  @@unique([userId, eventId, type])
}

// プロジェクトモデル（ユーザーの複数プロジェクト管理用）
model Project {
  id           String    @id @default(cuid())
  name         String
  description  String?   @db.Text
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  genre        String[]
  
  // プロジェクト所有者
  userId       String
  user         User      @relation(fields: [userId], references: [id])
}

// チームモデル
model Team {
  id           String    @id @default(cuid())
  name         String
  description  String?   @db.Text
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // チームメンバー
  members      TeamMember[]
}

// チームメンバーシップモデル
model TeamMember {
  id           String    @id @default(cuid())
  role         String?
  joinedAt     DateTime  @default(now())
  
  // リレーション
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  
  teamId       String
  team         Team      @relation(fields: [teamId], references: [id])
  
  @@unique([userId, teamId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
